#pragma once
#include <ntifs.h>

//#define IO_GET_CLIENTADRESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x228, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
//#define IO_READ_REQUEST CTL_CODE(FILE_DEVICE_UNKNOWN, 0x227, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
//#define IO_WRITE_REQUEST CTL_CODE(FILE_DEVICE_UNKNOWN, 0x229, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
//#define IO_REQUEST_PROCESSID CTL_CODE(FILE_DEVICE_UNKNOWN, 0x230, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IO_INIT_DATA CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1337, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_INIT_PATH CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1338, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_READ_PROCESS_MEMORY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1488, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_WRITE_PROCESS_MEMORY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1499, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

NTSTATUS IoControl(PDEVICE_OBJECT DeviceObject, PIRP Irp);

NTSTATUS CloseCall(PDEVICE_OBJECT DeviceObject, PIRP Irp);

NTSTATUS CreateCall(PDEVICE_OBJECT DeviceObject, PIRP Irp);

typedef struct _KERNEL_READ_REQUEST
{
	DWORD64	Adress;
	DWORD64 Response;
	SIZE_T Size;
	NTSTATUS Result;
} _KERNEL_READ_REQUEST, *PKERNEL_READ_REQUEST2;

typedef struct _KERNEL_WRITE_REQUEST
{
	DWORD64	Adress;
	DWORD64 Value;
	SIZE_T Size;
	NTSTATUS Result;
}_KERNEL_WRITE_REQUEST, * PKERNEL_WRITE_REQUEST2;

typedef struct _KERNEL_PROCESS_DATA_REQUEST
{
	DWORD32 procId;
	DWORD64 controllerId;
	DWORD64 baseAdress;
	NTSTATUS Result;
}_KERNEL_PROCESS_DATA_REQUEST, * PKERNEL_PROCESS_DATA_REQUEST;

typedef struct _KERNEL_INIT_REQUEST
{
	wchar_t* path;
}_KERNEL_INIT_REQUEST, * PKERNEL_INIT_REQUEST;